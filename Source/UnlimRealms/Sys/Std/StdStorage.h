///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//	UnlimRealms
//	Author: Anatole Kuzub
//
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma once

#include "Sys/Storage.h"

namespace UnlimRealms
{

	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	// Standard library based storage implemntation
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////	
	class UR_DECL StdStorage : public Storage
	{
	public:

		StdStorage(Realm &realm);

		virtual ~StdStorage();

		virtual Result Open(std::unique_ptr<File> &file, const std::string &name, const ur_uint accessFlags);

	protected:

		virtual Result OnInitialize();
	};

	
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	// Standard library based file implemntation
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////	
	class UR_DECL StdFile : public File
	{
	public:

		StdFile(Storage &storage, const std::string &name);

		virtual ~StdFile();

		virtual Result Open(const ur_uint accessFlags);

		virtual Result Close();

		virtual ur_size GetSize();

		virtual Result Read(const ur_size size, ur_byte *buffer);

		virtual Result Write(const ur_size size, const ur_byte *buffer);

		virtual Result Read(std::string &text);

		virtual Result Write(const std::string &text);

	private:

		std::unique_ptr<std::fstream> stream;
	};

} // end namespace UnlimRealms