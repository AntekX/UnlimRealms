///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//	UnlimRealms
//	Author: Anatole Kuzub
//
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma once

#include "Sys/Input.h"

namespace UnlimRealms
{

	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	// Device
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////	

	Input::Device::Device(Input &input) :
		input(input)
	{

	}

	Input::Device::~Device()
	{

	}

	Result Input::Device::Initialize()
	{
		return Result(NotImplemented);
	}

	void Input::Device::Update()
	{
		
	}


	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	// Keyboard
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////	

	Input::Keyboard::Keyboard(Input &input) :
		Input::Device(input)
	{
		memset(&this->vkeyState, 0x00, sizeof(this->vkeyState));
		memset(&this->vkeyToCode, 0xff, sizeof(this->vkeyToCode));
		memset(&this->codeToVKey, 0xff, sizeof(this->codeToVKey));
		memset(&this->inputQueue, 0xff, sizeof(this->inputQueue));
		this->inputQueueSize = 0;
	}

	Input::Keyboard::~Keyboard()
	{

	}

	Result Input::Keyboard::Initialize()
	{
		return Result(NotImplemented);
	}


	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	// Mouse
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	Input::Mouse::Mouse(Input &input) : 
		Input::Device(input)
	{
		this->lbState = KeyState::Up;
		this->mbState = KeyState::Up;
		this->rbState = KeyState::Up;
		this->wheelDelta = 0;
	}

	Input::Mouse::~Mouse()
	{

	}

	Result Input::Mouse::Initialize()
	{
		return Result(NotImplemented);
	}


	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	// Gamepad
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	Input::Gamepad::Gamepad(Input &input) :
		Input::Device(input)
	{

	}

	Input::Gamepad::~Gamepad()
	{

	}

	Result Input::Gamepad::Initialize()
	{
		return Result(NotImplemented);
	}


	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	// Input
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	Input::Input(Realm &realm) :
		RealmEntity(realm)
	{

	}

	Input::~Input()
	{

	}

	Result Input::Initialize()
	{
		return Result(NotImplemented);
	}

	void Input::Update()
	{
		// update all devices

		if (this->keyboard.get() != ur_null)
		{
			this->keyboard->Update();
		}

		if (this->mouse.get() != ur_null)
		{
			this->mouse->Update();
		}

		for (ur_uint idx = 0; idx < Gamepad::MaxConnected; ++idx)
		{
			if (this->gamepad[idx].get() != ur_null)
			{
				this->gamepad[idx]->Update();
			}
		}
	}

} // end namespace UnlimRealms