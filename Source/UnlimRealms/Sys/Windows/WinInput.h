///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//	UnlimRealms
//	Author: Anatole Kuzub
//
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma once

#include "Sys/Input.h"

namespace UnlimRealms
{

	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	// Windows system input
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////	
	class UR_DECL WinInput : public Input
	{
	public:

		///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		// Keyboard implementation
		///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////	
		class UR_DECL WinKeyboard : public Keyboard
		{
		public:

			WinKeyboard(WinInput &winInput);

			~WinKeyboard();

			virtual Result Initialize();

			virtual void Update();
		};

		///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		// Mouse implementation
		///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////	
		class UR_DECL WinMouse : public Mouse
		{
		public:

			WinMouse(WinInput &winInput);
			
			~WinMouse();

			virtual Result Initialize();

			virtual void Update();
		};


		WinInput(Realm &realm);

		virtual ~WinInput();

		virtual Result Initialize();

		virtual void Update();

		void ProcessMsg(const MSG &msg);

	private:

		friend class WinKeyboard;
		friend class WinMouse;

		std::vector<MSG> msgQueue;
	};

} // end namespace UnlimRealms